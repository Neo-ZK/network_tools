#
user  admin;
worker_processes 1;
#daemon off;
#master_process off;
#error_log  logs/error.log debug_http;
#error_log  logs/error.log;
error_log  logs/error.log.1  error;
#pid        logs/nginx.pid;


events {
	worker_connections  102400;
}


http {
  lua_shared_dict x509_dict 5m;
  lua_shared_dict active_cert_dict 1m;
  lua_shared_dict cache_dict 1m;
  default_type  application/octet-stream;
  lua_package_path '/home/admin/spanner/lua/?.lua;;/home/admin/spanner/lua/?/?.lua';
  lua_package_cpath '/home/admin/spanner/lua/lib/?.so;;';

  init_by_lua_block {
    local cache_dict = ngx.shared.cache_dict
    local str_len = 1000
    local t = {"0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z",}
    local s = "a"
    for i=1, str_len do
        s = s..t[math.random(#(t))]
    end
    cache_dict:set("str", s)
  }


	log_format  gslb  ' $ssl_handshake_time   is:$remote_addr $remote_port [$time_local] "$request" $host '
	                  '$status $upstream_status $body_bytes_sent "$http_referer" '
	                  '"$http_user_agent" $ssl_protocol $ssl_cipher '
	                  '"server=$server_name port=$server_port" '
	                  '$upstream_addr $request_time $upstream_response_time';
	access_log  logs/access.log  gslb;

	sendfile        on;

	keepalive_timeout   1000;



server {
    listen 81;
    location /{
        content_by_lua_block {
           -- ngx.sleep(20)
            ngx.header.content_type = 'text/plain';
            ngx.say("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
            ngx.flush()
            ngx.sleep(10)
            ngx.say("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")
        }
    }

}

server {
    listen 82;
    location /{
        content_by_lua_block {
            ngx.header.content_type = 'text/plain';
            local a = "a"
            local resp_len = 1000
            for i=1, resp_len do
                a = a.."a"
            end
            ngx.say(a)
        }
    }
}

server {
    listen 83;
    location /{
        content_by_lua_block {
            local cache_dict = ngx.shared.cache_dict
            ngx.header.content_type = 'text/plain'
            local str = cache_dict:get("str")
            ngx.say(a)
        }
    }
}

server{
  listen 8080 backlog=65535;
  server_name spanner;

  allow 127.0.0.1;
  deny all;

  set $hosturi $host$uri;
  set $app_name spanner;

  access_log off;
  sinfo off;

  client_body_buffer_size 128k;

  location /status{
    stub_status on;
  }

  location /v2_msg_status {
    v2_msg_status on;
  }
  #location /dynamic_cert_update {
    #dynamic_cert_update;
  #}
  #location /dynamic_cert_status {
    #dynamic_cert_status;
  #}

  ###location /dynamic_cert {
    #content_by_lua_file /home/william.zk/spannerplus/modules/mod_dynamic_ssl/dynamic_cert_update.lua;
  #}
  #
  #location /dynamic_cert_status {
    #content_by_lua_file /home/william.zk/spannerplus/modules/mod_dynamic_ssl/dynamic_cert_status.lua;
  #}
  #location /zstd_dict_status {
      #zstd_dict_status;
  #}
}
}
